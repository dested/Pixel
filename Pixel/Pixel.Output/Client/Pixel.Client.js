(function() {
	'use strict';
	var $asm = {};
	global.Pixel = global.Pixel || {};
	global.Pixel.Client = global.Pixel.Client || {};
	global.Pixel.Client.Model = global.Pixel.Client.Model || {};
	global.Pixel.Client.Utils = global.Pixel.Client.Utils || {};
	ss.initAssembly($asm, 'Pixel.Client');
	////////////////////////////////////////////////////////////////////////////////
	// Pixel.Client.Game
	var $Pixel_Client_Game = function() {
		this.screenModel = null;
		this.currentGameView = null;
		var $t1 = document.getElementById('gameBG');
		var canvasBgElement = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'CANVAS'));
		var $t2 = document.getElementById('gameSprites');
		var canvasSpritesElement = ss.cast($t2, ss.isValue($t2) && (ss.isInstanceOfType($t2, Element) && $t2.tagName === 'CANVAS'));
		var $t3 = document.getElementById('gameFG');
		var canvasFgElement = ss.cast($t3, ss.isValue($t3) && (ss.isInstanceOfType($t3, Element) && $t3.tagName === 'CANVAS'));
		this.screenModel = new $Pixel_Client_Model_ScreenModel(canvasBgElement, canvasSpritesElement, canvasFgElement);
		window.addEventListener('resize', ss.mkdel(this, this.$resizeCanvas), false);
		this.$resizeCanvas();
		this.currentGameView = new $Pixel_Client_GameView(this.screenModel, new $Pixel_Client_Model_RenderGameModel($Pixel_Client_Utils_StaticData.fakeGameData[0]));
	};
	$Pixel_Client_Game.__typeName = 'Pixel.Client.Game';
	$Pixel_Client_Game.$main = function() {
		window.onload = function(e) {
			new $Pixel_Client_Game();
		};
	};
	global.Pixel.Client.Game = $Pixel_Client_Game;
	////////////////////////////////////////////////////////////////////////////////
	// Pixel.Client.GameView
	var $Pixel_Client_GameView = function(screenModel, gameModel) {
		this.$gameModel = null;
		this.$screenModel = null;
		this.currentBoard = null;
		this.$screenModel = screenModel;
		this.$gameModel = gameModel;
		this.currentBoard = 'First Level';
		this.init();
	};
	$Pixel_Client_GameView.__typeName = 'Pixel.Client.GameView';
	global.Pixel.Client.GameView = $Pixel_Client_GameView;
	////////////////////////////////////////////////////////////////////////////////
	// Pixel.Client.Model.RenderBoardModel
	var $Pixel_Client_Model_RenderBoardModel = function(boardData) {
		Pixel.Common.Model.BoardModel.call(this, boardData);
		this.sprites = Array.prototype.slice.call(Common.EnumerableExtensions.select(Pixel.Common.Data.SpriteInstanceData, $Pixel_Client_Model_RenderSpriteInstanceModel).call(null, boardData.sprites, function(s) {
			return new $Pixel_Client_Model_RenderSpriteInstanceModel(s);
		}));
	};
	$Pixel_Client_Model_RenderBoardModel.__typeName = 'Pixel.Client.Model.RenderBoardModel';
	global.Pixel.Client.Model.RenderBoardModel = $Pixel_Client_Model_RenderBoardModel;
	////////////////////////////////////////////////////////////////////////////////
	// Pixel.Client.Model.RenderGameModel
	var $Pixel_Client_Model_RenderGameModel = function(gameData) {
		Pixel.Common.Model.GameModel.call(this, gameData);
		this.tiles = Array.prototype.slice.call(Common.EnumerableExtensions.select(Pixel.Common.Data.TileData, $Pixel_Client_Model_RenderTileModel).call(null, gameData.tiles, function(t) {
			return new $Pixel_Client_Model_RenderTileModel(t);
		}));
		this.boards = Array.prototype.slice.call(Common.EnumerableExtensions.select(Pixel.Common.Data.BoardData, $Pixel_Client_Model_RenderBoardModel).call(null, gameData.boards, function(t1) {
			return new $Pixel_Client_Model_RenderBoardModel(t1);
		}));
		this.sprites = Array.prototype.slice.call(Common.EnumerableExtensions.select(Pixel.Common.Data.SpriteData, $Pixel_Client_Model_RenderSpriteModel).call(null, gameData.sprites, function(t2) {
			return new $Pixel_Client_Model_RenderSpriteModel(t2);
		}));
	};
	$Pixel_Client_Model_RenderGameModel.__typeName = 'Pixel.Client.Model.RenderGameModel';
	global.Pixel.Client.Model.RenderGameModel = $Pixel_Client_Model_RenderGameModel;
	////////////////////////////////////////////////////////////////////////////////
	// Pixel.Client.Model.RenderSpriteInstanceModel
	var $Pixel_Client_Model_RenderSpriteInstanceModel = function(spriteInstanceData) {
		Pixel.Common.Model.SpriteInstanceModel.call(this, spriteInstanceData);
	};
	$Pixel_Client_Model_RenderSpriteInstanceModel.__typeName = 'Pixel.Client.Model.RenderSpriteInstanceModel';
	global.Pixel.Client.Model.RenderSpriteInstanceModel = $Pixel_Client_Model_RenderSpriteInstanceModel;
	////////////////////////////////////////////////////////////////////////////////
	// Pixel.Client.Model.RenderSpriteModel
	var $Pixel_Client_Model_RenderSpriteModel = function(spriteData) {
		Pixel.Common.Model.SpriteModel.call(this, spriteData);
	};
	$Pixel_Client_Model_RenderSpriteModel.__typeName = 'Pixel.Client.Model.RenderSpriteModel';
	global.Pixel.Client.Model.RenderSpriteModel = $Pixel_Client_Model_RenderSpriteModel;
	////////////////////////////////////////////////////////////////////////////////
	// Pixel.Client.Model.RenderTileModel
	var $Pixel_Client_Model_RenderTileModel = function(tileData) {
		Pixel.Common.Model.TileModel.call(this, tileData);
	};
	$Pixel_Client_Model_RenderTileModel.__typeName = 'Pixel.Client.Model.RenderTileModel';
	global.Pixel.Client.Model.RenderTileModel = $Pixel_Client_Model_RenderTileModel;
	////////////////////////////////////////////////////////////////////////////////
	// Pixel.Client.Model.ScreenModel
	var $Pixel_Client_Model_ScreenModel = function(canvasBgElement, canvasSpritesElement, canvasFgElement) {
		this.canvasBgElement = null;
		this.canvasSpritesElement = null;
		this.canvasFgElement = null;
		this.canvasBgCanvas = null;
		this.canvasSpritesCanvas = null;
		this.canvasFgCanvas = null;
		this.canvasBgElement = canvasBgElement;
		this.canvasSpritesElement = canvasSpritesElement;
		this.canvasFgElement = canvasFgElement;
		this.canvasBgCanvas = ss.cast(this.canvasBgElement.getContext('2d'), CanvasRenderingContext2D);
		this.canvasSpritesCanvas = ss.cast(this.canvasSpritesElement.getContext('2d'), CanvasRenderingContext2D);
		this.canvasFgCanvas = ss.cast(this.canvasFgElement.getContext('2d'), CanvasRenderingContext2D);
	};
	$Pixel_Client_Model_ScreenModel.__typeName = 'Pixel.Client.Model.ScreenModel';
	global.Pixel.Client.Model.ScreenModel = $Pixel_Client_Model_ScreenModel;
	////////////////////////////////////////////////////////////////////////////////
	// Pixel.Client.Utils.ClientHelper
	var $Pixel_Client_Utils_ClientHelper = function() {
	};
	$Pixel_Client_Utils_ClientHelper.__typeName = 'Pixel.Client.Utils.ClientHelper';
	$Pixel_Client_Utils_ClientHelper.canvasWrapper = function(renderer, canvas) {
		canvas.save();
		renderer(canvas);
		canvas.restore();
	};
	$Pixel_Client_Utils_ClientHelper.canvasWrapper$1 = function(renderer, canvas1, canvas2) {
		canvas1.save();
		canvas2.save();
		renderer(canvas1, canvas2);
		canvas1.restore();
		canvas2.restore();
	};
	$Pixel_Client_Utils_ClientHelper.requestAnimFrame = function(render) {
		window.setTimeout(render, 16);
	};
	$Pixel_Client_Utils_ClientHelper.canvasDraw = function(render) {
		var happen = null;
		happen = function() {
			$Pixel_Client_Utils_ClientHelper.requestAnimFrame(happen);
			render();
		};
		happen();
	};
	global.Pixel.Client.Utils.ClientHelper = $Pixel_Client_Utils_ClientHelper;
	////////////////////////////////////////////////////////////////////////////////
	// Pixel.Client.Utils.StaticData
	var $Pixel_Client_Utils_StaticData = function() {
	};
	$Pixel_Client_Utils_StaticData.__typeName = 'Pixel.Client.Utils.StaticData';
	global.Pixel.Client.Utils.StaticData = $Pixel_Client_Utils_StaticData;
	ss.initClass($Pixel_Client_Game, $asm, {
		$resizeCanvas: function() {
			var w = window.innerWidth;
			var h = window.innerHeight;
			this.screenModel.canvasBgElement.width = w;
			this.screenModel.canvasBgElement.height = h;
			this.screenModel.canvasFgElement.width = w;
			this.screenModel.canvasFgElement.height = h;
			this.screenModel.canvasSpritesElement.width = w;
			this.screenModel.canvasSpritesElement.height = h;
		}
	});
	ss.initClass($Pixel_Client_GameView, $asm, {
		init: function() {
			$Pixel_Client_Utils_ClientHelper.canvasDraw(ss.mkdel(this, this.render));
		},
		tick: function() {
		},
		render: function() {
			var board = Common.EnumerableExtensions.first$1(Pixel.Common.Model.BoardModel).call(null, this.$gameModel.boards, ss.mkdel(this, function(b) {
				return ss.referenceEquals(b.boardName, this.currentBoard);
			}));
			$Pixel_Client_Utils_ClientHelper.canvasWrapper(ss.mkdel(this, function(canvas) {
				for (var i = 0; i < board.bgTiles.length; i++) {
					var tile = board.bgTiles[i];
					ss.cast(this.$gameModel.tiles[tile], $Pixel_Client_Model_RenderTileModel).render(canvas);
				}
			}), this.$screenModel.canvasBgCanvas);
			$Pixel_Client_Utils_ClientHelper.canvasWrapper(function(canvas1) {
			}, this.$screenModel.canvasSpritesCanvas);
			$Pixel_Client_Utils_ClientHelper.canvasWrapper(function(canvas2) {
			}, this.$screenModel.canvasFgCanvas);
		}
	});
	ss.initClass($Pixel_Client_Model_RenderBoardModel, $asm, {
		render: function(canvas) {
		}
	}, Pixel.Common.Model.BoardModel);
	ss.initClass($Pixel_Client_Model_RenderGameModel, $asm, {
		render: function(canvas) {
		}
	}, Pixel.Common.Model.GameModel);
	ss.initClass($Pixel_Client_Model_RenderSpriteInstanceModel, $asm, {
		render: function(canvas) {
		}
	}, Pixel.Common.Model.SpriteInstanceModel);
	ss.initClass($Pixel_Client_Model_RenderSpriteModel, $asm, {
		render: function(canvas) {
		}
	}, Pixel.Common.Model.SpriteModel);
	ss.initClass($Pixel_Client_Model_RenderTileModel, $asm, {
		render: function(canvas) {
		}
	}, Pixel.Common.Model.TileModel);
	ss.initClass($Pixel_Client_Model_ScreenModel, $asm, {});
	ss.initClass($Pixel_Client_Utils_ClientHelper, $asm, {});
	ss.initClass($Pixel_Client_Utils_StaticData, $asm, {});
	$Pixel_Client_Utils_StaticData.fakeGameData = null;
	$Pixel_Client_Utils_StaticData.fakeGameData = [];
	var $t14 = $Pixel_Client_Utils_StaticData.fakeGameData;
	var $t1 = Pixel.Common.Data.GameData.$ctor();
	$t1.name = 'First Level';
	var $t2 = [];
	ss.add($t2, 'red');
	null;
	ss.add($t2, 'blue');
	null;
	$t1.palette = $t2;
	$t1.tileWidth = 16;
	$t1.tileHeight = 16;
	$t1.init = '';
	$t1.tick = '';
	var $t3 = [];
	var $t4 = Pixel.Common.Data.TileData.$ctor();
	var $t5 = [];
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	ss.add($t5, 1);
	null;
	ss.add($t5, 0);
	null;
	$t4.pixels = $t5;
	ss.add($t3, $t4);
	null;
	var $t6 = Pixel.Common.Data.TileData.$ctor();
	var $t7 = [];
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	ss.add($t7, 1);
	null;
	ss.add($t7, 0);
	null;
	$t6.pixels = $t7;
	ss.add($t3, $t6);
	null;
	var $t8 = Pixel.Common.Data.TileData.$ctor();
	var $t9 = [];
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	ss.add($t9, 1);
	null;
	ss.add($t9, 0);
	null;
	$t8.pixels = $t9;
	ss.add($t3, $t8);
	null;
	$t1.tiles = $t3;
	$t1.sprites = [];
	var $t10 = [];
	var $t11 = Pixel.Common.Data.BoardData.$ctor();
	var $t12 = [];
	ss.add($t12, 0);
	null;
	ss.add($t12, 1);
	null;
	ss.add($t12, 2);
	null;
	ss.add($t12, 0);
	null;
	ss.add($t12, 1);
	null;
	ss.add($t12, 0);
	null;
	ss.add($t12, 1);
	null;
	ss.add($t12, 2);
	null;
	ss.add($t12, 1);
	null;
	ss.add($t12, 1);
	null;
	ss.add($t12, 0);
	null;
	ss.add($t12, 0);
	null;
	ss.add($t12, 2);
	null;
	ss.add($t12, 1);
	null;
	ss.add($t12, 1);
	null;
	ss.add($t12, 0);
	null;
	ss.add($t12, 1);
	null;
	ss.add($t12, 0);
	null;
	ss.add($t12, 0);
	null;
	ss.add($t12, 1);
	null;
	ss.add($t12, 0);
	null;
	ss.add($t12, 1);
	null;
	ss.add($t12, 2);
	null;
	ss.add($t12, 0);
	null;
	ss.add($t12, 1);
	null;
	$t11.bgTiles = $t12;
	var $t13 = [];
	ss.add($t13, 0);
	null;
	ss.add($t13, 1);
	null;
	ss.add($t13, 2);
	null;
	ss.add($t13, 0);
	null;
	ss.add($t13, 1);
	null;
	ss.add($t13, 0);
	null;
	ss.add($t13, 1);
	null;
	ss.add($t13, 2);
	null;
	ss.add($t13, 1);
	null;
	ss.add($t13, 1);
	null;
	ss.add($t13, 0);
	null;
	ss.add($t13, 0);
	null;
	ss.add($t13, 2);
	null;
	ss.add($t13, 1);
	null;
	ss.add($t13, 1);
	null;
	ss.add($t13, 0);
	null;
	ss.add($t13, 1);
	null;
	ss.add($t13, 0);
	null;
	ss.add($t13, 0);
	null;
	ss.add($t13, 1);
	null;
	ss.add($t13, 0);
	null;
	ss.add($t13, 1);
	null;
	ss.add($t13, 2);
	null;
	ss.add($t13, 0);
	null;
	ss.add($t13, 1);
	null;
	$t11.fgTiles = $t13;
	$t11.sprites = [];
	$t11.boardWidth = 5;
	$t11.boardHeight = 5;
	$t11.boardName = 'First Level';
	ss.add($t10, $t11);
	null;
	$t1.boards = $t10;
	ss.add($t14, $t1);
	$Pixel_Client_Game.$main();
})();
